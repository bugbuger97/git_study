<git> 
소스 코드를 관리하기 위한 분산 버전 제어 시스템이다.
사용자가 파일을 수정할 때, 변경사항을 기록하고 저장하므로 언제든지 이전 버전의 작업을 복원할 수 있음.
소스코드의 수정 내역에 쉽게 접근 가능함.
버전이 어떻게 변경되었는지, 누가 변경했는지 확인 가능함.

<git 구성 요소>
1. 저장소, 2. 작업 트리, 3. 인덱스

<1. 저장소(Repositiory)>
project 파일의 모든 변경 사항을 추적하는 "컨테이너"임.
만든 모든 commit을 가지고 있음.
git log를 사용하여 commit record에 접근할 수 있음.
코드를 저장하기 위해 중앙에 위치한 폴더임.

<2. 작업 트리(Work Tree)>
작업 디렉토리라고도 함.
작업 중인 파일로 구성됨.
작업 트리를 파일을 보고 수정할 수 있는 파일 시스템으로 생각할 수 있음.

<3. 인덱스(Index)>
스테이지 영역이라고도 함.
commit이 준비되는 곳임.
스테이징 되면 작업 트리의 파일이 저장소의 파일과 비교됨.
작업 트리의 파일에 대한 변경 사항은 커밋하기 전에 수정된 것으로 표시됨.

<기본 git work flow>
1. Work Tree에서 파일을 수정함.
2. 다음 commit에 포함하려는 변경 사항을 준비함. (git add)
3. 변경 사항을 commit함. (git commit)

<git 파일의 4가지 상태>
(Tracked) 1. Modified, 2. Staged, 3. Committed, (Untracked) 

<원격 저장소 vs 로컬 저장소>
원격 저장소 : 원격에서 호스팅되고 여러 킴 구겅원 간에 공유됨. (github) 코드 변경사항을 풀링하고 푸시하는 것은 원격 저장소에서만 수행됨.
로컬 저장소 : 개별 사용자의 로컬 컴퓨터에서 호스팅됨. git 제어 기능 사용 가능함.

<저장소 생성>
1. 새 저장소
- git init을 사용하여 새 저장소를 만들 수 있음.
- 버전이 지정되지 않은 기존 프로젝트에 git을 도입하여 변경 사항 추적을 시작할 수 있음.
2. 복사된 저장소 
- git clone 명령을 사용하여 원격 저장소를 로컬 시스템에 복사 할 수 있음.
- 기본적으로 git clone은 복제된 원격 메인 브랜치를 추적하는 로컬 메인 브랜치를 자동으로 설정함.

<변경 사항 commit>
git commit을 사용하면 저장소의 git 기록에 파일 변경 사항을 기록할 수 있음.
commit한 모든 변경 사항은 각 파일 또는 디렉토리에서 시간순으로 볼 수 있음.
40자 체크섬 해시는 각 commit을 고유하게 식별함.
체크섬 해시를 사용하여 저장소의 지정된 commit에 대한 상태나 변경사항을 검색할 수 있음.

<변경 취소>
git의 유용한 기능 중 하나는 실수를 취소하는 기능이다.
변경 사항을 취소하는 2가지 방법은 git revert, git reset이 있다.

<commit 취소>
1. git revert
git revert를 사용하여 이전 commit을 취소함. -> 변경 사항을 실행을 취소하는 가장 일반적인 방법임.
revert 명령은 이전 commit의 변경 사항을 되돌리는 새 commit을 만듦. 
기록을 보존하면서 git 저장소의 변경 사항을 관리하는 데 유용한 도구임.
2. git reset 또는 git rebase -i
이 명령을 사용하면 기록에서 이전 커밋을 삭제할 수 있지만, 원격 저장소가 다른 구성원의 로컬 저장소와 다르기 때문에 일반적으로 권장하지 않음.
git reset은 Head가 이전 commit을 가리키도록 해서 재설정 모드로 전환하여 재설정 명령의 범위를 지정할 수 있음.

<재설정 모드>
mix 모드 : 변경된 인덱스의 상태를 복원함.
soft 모드 : 이전 commit을 취소함.
hard 모드 : commit의 모든 흔적을 제거함.

<저장소 동기화>
원격 저장소는 개인 서버, 귀하와 다른 컴퓨터에 있거나 Backlog와 같은 특정 프로젝트 관리 소프트웨어를 통해 호스팅될 수 있음.
어디에서 호스팅을 하든 다른 팀 구성원과 변경 사항을 공유하려면 로컬 저장소를 원격 저장소와 자주 동기화해야함.
git push, git pull, git merge의 3가지 명령을 사용하여 저장소를 동기화할 수 있음.

<변경 사항 push>
변경 사항을 공유하려면 git push를 사용하여 원격 저장소에 push해야 함.

<변경 사항 풀링>
누군가 공유 원격 저장소에 변경 사항을 푸시할 때마다 로컬 저장소가 구식이 됨.
로컬 저장소를 새로 업데이트 된 원격 저장소와 동기화하려면 git pull을 실행하면 됨.
pull이 실행되면 원격 저장소에서 최신 개정 기록을 다운로드하고 로컬 저장소로 가져옴.

<변경 사항 병합>
로컬 저장소가 오래된 경우, 원격 저장소에 대한 push가 거부됨.
이 경우 푸시하기 전에 git merge를 사용하여 원격 브랜치의 로컬 복사본에서 최신 변경 사항을 통합함.
git은 다른 구성원이 변경한 내용이 버전 기록에 유지 되도록 하기 위해 이를 적용함.
병합하는 동한 git은 기록 변경 사항을 자동으로 적용하고 현재 브랜치와 병합하려고 시도함.
충돌이 있는 경우, 수동으로 해결하라는 오류 메시지가 표시됨.

<병합 충돌 해결>
병합을 제대로 완료하기 전에 해결해야 하는 충돌이 발생할 수 있음.
충돌이 발생하면, git은 충돌 파일에 충돌 해결 마커를 추가함. 
마커는 수동으로 해결해야 하는 파일 섹션을 파악하는데 도움이 됨.
 
<commit 수정>
git commit --amend을 실행하여 동일한 브랜치에서 가장 최근 commit을 수정할 수 있음.
이 명령은 새 파일이나 업데이트된 파일을 이전 commit에 추가하는데 편리함.
이전 commit에 commit message를 편집하거나 추가하는 간단한 방법임.

<새 브랜치에 commit 복사>
rebase는 하나의 브랜치에서 commit된 모든 변경 사항을 새 브랜치로 복사하는 프로세스임.
git rebase을 실행하고 -i 옵션을 추가하여 기록에서 개별 commit을 다시 작성, 교체, 삭제 및 병합을 함.

rebase 명령
- 과거 commit message 다시 쓰기
- commit 그룹을 함께 스쿼시
- commit되지 않은 파일 추가   

<다른 브랜치에 commit 복사>
git cherry-pick을 사용하여 다른 브랜치에서 저장소 내의 현재 브랜치로 기존 커밋을 복사할 수 있음.

체리피킹을 통해 
1. 잘못된 브랜치에서 올바른 브랜치로 commit을 이동함.
2. 다른 브랜치의 기존 commit을 기반으로 현재 브랜치에 커밋을 추가함.
이 2가지를 수행할 수 있음.
